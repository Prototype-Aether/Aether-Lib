var searchIndex = JSON.parse('{\
"aether_lib":{"doc":"A library that provides P2P communication for Prototype â€¦","t":[0,0,0,0,0,0,0,0,0,0,3,3,3,17,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,17,17,17,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,12,0,11,11,11,11,0,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,4,13,3,13,13,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,17,5,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,5,5,5,5],"n":["acknowledgement","config","encryption","error","identity","link","packet","peer","tracker","util","Acknowledgement","AcknowledgementCheck","AcknowledgementList","MAX_WINDOW","ack_begin","ack_end","acknowledge","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","get","init","init","init","insert","insert","into","into","into","is_complete","miss","miss_count","new","new","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AetherConfig","Config","HandshakeConfig","LinkConfig","ack_only_time","ack_wait_time","aether","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","connection_check_delay","default","default","default","default","delta_time","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_file","get_config","handshake","handshake_retry_delay","handshake_timeout","init","init","init","init","into","into","into","into","link","max_retries","ne","ne","ne","ne","peer_poll_time","poll_time_us","poll_time_us","retry_delay","serialize","serialize","serialize","serialize","server_poll_time","server_retry_delay","timeout","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","window_size","AetherCipher","Encrypted","IV_SIZE","KEY_SIZE","TAG_SIZE","aad","borrow","borrow","borrow_mut","borrow_mut","cipher_text","clone","clone_into","decrypt_bytes","deref","deref","deref_mut","deref_mut","drop","drop","encrypt_bytes","fmt","from","from","from","init","init","into","into","iv","new","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AetherError","AuthenticationFailed","AuthenticationInvalid","Base64DecodeError","ChannelRecvError","ChannelSendError","ElapsedTime","FileRead","FileWrite","FromUtf8Error","HandshakeError","LinkStopped","LinkTimeout","MutexLock","NotConnected","OpenSSLError","RecvTimeout","SetReadTimeout","YamlParse","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Id","PublicId","RSA_SIZE","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_base64","get_private_key_path","get_public_key_path","init","init","into","into","load","load_or_generate","new","private_decrypt","private_encrypt","private_key_to_base64","public_decrypt","public_decrypt","public_encrypt","public_encrypt","public_key_to_base64","public_key_to_base64","save","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Link","borrow","borrow_mut","decryptionthread","deref","deref_mut","drop","drop","enable_encryption","fmt","from","get_addr","get_receiver","init","into","is_empty","is_encrypted","needs_ack","new","peer_id","private_id","receivethread","recv","recv_timeout","send","send_packet","sendthread","set_read_timout","start","stop","try_from","try_into","type_id","vzip","wait_empty","DecryptionThread","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","start","try_from","try_into","type_id","vzip","OrderList","ReceiveThread","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","insert","into","into","new","new","start","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SendThread","ack_packet","add_ack","borrow","borrow_mut","check_ack","deref","deref_mut","drop","fetch_window","from","init","into","is_empty","new","send","start","try_from","try_into","type_id","vzip","AckOnly","Data","Extended","Initiation","KeyExchange","PType","Packet","PacketFlags","PacketMeta","ack","ack","add_ack","append_payload","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compile","delay_ms","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","enc","eq","flags","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_byte","get_max_header_size","init","init","init","init","into","into","into","into","is_meta","meta","new","p_type","payload","retry_count","sequence","set_enc","set_meta","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Aether","Connected","Connection","Failed","Failure","Handshake","Init","Initialized","Peer","authentication","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","connect","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","get_uid","handshake","identity_number","init","init","init","init","init","into","into","into","into","into","is_connected","is_connecting","is_initialized","new","new","new_with_id","recv_from","send_to","start","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uid","vzip","vzip","vzip","vzip","vzip","wait_connection","0","0","0","NONCE_SIZE","authenticate","handshake","ConnectionRequest","TrackerPacket","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connections","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","fmt","fmt","from","from","identity_number","identity_number","init","init","into","into","ip","ip","ne","ne","packet_type","peer_username","port","port","req","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","username","username","vzip","vzip","compile_u16","compile_u32","gen_nonce","xor"],"q":["aether_lib","","","","","","","","","","aether_lib::acknowledgement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::encryption","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::error::AetherError","","","","","","","","","","","","","","","aether_lib::identity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::link","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::link::decryptionthread","","","","","","","","","","","","","","","aether_lib::link::receivethread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::link::sendthread","","","","","","","","","","","","","","","","","","","","","aether_lib::packet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::peer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::peer::Connection","","","aether_lib::peer::authentication","","aether_lib::peer::handshake","aether_lib::tracker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aether_lib::util","","",""],"d":["Structures for facilitating storing acknowledgment numbers â€¦","Structures to represent configuration used by <code>aether_lib</code>","Primitives for symmetric encryption for Aether. Makes use â€¦","Structures to represent errors in <code>aether_lib</code>","Primitives for representing PKC based user identities. â€¦","Structure for representing a reliable <code>Link</code> between 2 peers.","Primitives for representing a unit of packet in Aether.","Structure for representing an <code>Aether</code> client.","Primitives for representing packets used to communicate â€¦","General purpose utilities used by <code>aether_lib</code> often.","Structure to reperesent the Acknowledgement format","A checklist to store all Acknowledgements received.","A structure to store the Acknowledgements that need to be â€¦","","The sequence number of the packet from which the â€¦","The number of packets that this Acknowledgement includes. â€¦","Add Acknowledgement to the list based on the â€¦","","","","","","","Check if the packet with the given sequence number has â€¦","Check if the given sequence number has been added to the â€¦","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an <code>Acknowledgement</code> structure out of this â€¦","","","","Insert a specific Acknowledgement number into the list","Insert a sequence number into the Acknowledgement list","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the <code>AcknowledgementList</code> is complete. The list is â€¦","Vector of ack numbers (relative to <code>ack_begin</code>) which are â€¦","Number of packets from <code>ack_begin</code> till <code>ack_begin + ack_end</code> â€¦","Create a new instance of <code>AcknowledgementCheck</code> list","Creates a new instance of <code>AcknowledgementList</code>","","","","","","","","","","","","","","Structure to represent configuration for <code>peer</code> module","Structure to represent configuration options for <code>aether_lib</code>","Structure to represent configuration for <code>handshake</code> module","Structure to represent configuration for <code>link</code> module","Time to wait before sending another acknowledgment only â€¦","Time to wait for acknowledgement to be received","Configuration for <code>peer</code> module","","","","","","","","","","","","","","","","","Poll time to check if connection has been established","","","","","Magnitude by which to randomize retry delay","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns configuration read from <code>file_path</code> Configuration â€¦","Returns configuration read from the default configuration â€¦","Configuration for <code>handshake</code> module","How long to wait to retry handshake after a failed attempt â€¦","Timeout after which handshake can be declared failed if â€¦","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Configuration for <code>link</code> module","Number of times a packet can be retried before link is â€¦","","","","","Poll time to send sequence or sequence+acknowledgement to â€¦","General poll time to be used to check for updates to lists â€¦","Poll time for shared memory structures","Time to wait for acknowledgment before sending packets â€¦","","","","","How often to poll server for new connections","Duration to wait for Tracker server to respond (in ms)","Timeout or time of inactivity after which link is declared â€¦","","","","","","","","","","","","","","","","","","","","","","Window size for the link. Determines how many packets are â€¦","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Primitive to represent and store the identity of a user. â€¦","Primitive to represent public identity of a user. Used by â€¦","Size of RSA keys to be used","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Decode the given base64 string into a <code>PublicId</code>","Returns <code>PathBuf</code> to the private key on the filesystem","Returns <code>PathBuf</code> to the public key on the filesystem","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load an identity from the default location on the â€¦","Try to load the identity from the default location on the â€¦","Generate a new identity","Decrypt given bytes using the private key","Encrypt given bytes using the private key","Convert private key to a base64 encoded string Encodes â€¦","Decrypt given bytes using the public key","Decrypt given bytes using the public key","Encrypt given bytes using the public key","Encrypt given bytes using the public key","Convert public key to a base64 encoded string Encodes â€¦","Convert public key to a base64 encoded string Encodes â€¦","Save the current identity on the filesystem Saves the â€¦","","","","","","","","","","","Represents a single reliable <code>Link</code> to another peer","","","","","","","","","","Returns the argument unchanged.","Get the <code>SocketAddr</code> of the peer","Returns a <code>Receiver</code> to receive packets from the output queue","","Calls <code>U::from(self)</code>.","Returns true if no more packets needs to be sent Checks if â€¦","","Check if a given packet needs to be acknowledged based on â€¦","Creates a new <code>Link</code> to another peer","Public Identity of the other peer","Identity of the user that created this identity","","Receive bytes from the other peer","Receive bytes from the other peer or return an error if â€¦","Sends bytes to the other peer","Send a <code>packet</code> to the other peer","","Sets the read timeout for the <code>Link</code>","Starts the <code>Link</code> to the other peer","Stops the <code>Link</code> to the other peer","","","","","Waits and blocks the current thread until the <code>Link</code> is empty","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Data structure to facilitate ordering of incoming packets â€¦","Data structure to group data used by the receive thread","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Insert a packet into the <code>OrderList</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>OrderList</code> with the starting sequence number â€¦","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Add ack struct into the packet","Append payload Vec to the packet also assigns the length â€¦","","","","","","","","","","","Compile the data in the packet into packet struct","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new Packet","","","","","Set the packet encrypted flag","Set the packet as a meta packet with the given meta data","","","","","","","","","","","","","","","","","","<code>Aether</code> is an interface used to connect to other peers as â€¦","Connected state - a connection to the other peer has been â€¦","Enumeration representing different states of a connection","Failed state - a connection to the other peer had failed â€¦","","Handshake state - handshake with the other peer is in â€¦","Initialized state - connection has been initialized and is â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Size of the nonce to be used in authentication in bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Compile a 16-bit value into vector of bytes","Compile a 32-bit value into vector of bytes","Generate a cryptographically secure random nonce of the â€¦",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,2,3,1,2,3,2,3,1,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,2,3,1,2,3,3,1,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,4,4,5,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,6,5,6,7,4,6,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,5,5,6,7,5,6,7,4,5,6,7,4,5,4,5,6,7,4,7,6,4,4,5,6,7,4,6,6,4,5,6,7,4,5,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,4,0,0,0,0,0,8,8,9,8,9,8,9,9,9,8,9,8,9,8,9,9,9,8,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,26,27,27,26,26,26,27,26,27,26,26,26,26,26,26,26,27,26,27,26,27,26,26,27,26,27,26,27,26,27,26,27,0,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28,0,28,28,28,28,0,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,30,31,30,31,31,30,31,30,31,30,31,30,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,0,0,0,0,34,35,35,35,33,34,36,35,33,34,36,35,33,33,35,36,33,34,36,35,33,34,36,35,33,34,36,35,34,33,35,33,34,36,35,33,33,34,34,36,35,35,34,35,33,34,36,35,33,34,36,35,35,35,35,34,35,36,35,35,35,33,33,34,36,35,33,34,36,35,33,34,36,35,33,34,36,35,0,37,0,37,0,37,37,0,0,0,38,37,39,40,41,38,37,39,40,41,38,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,37,39,40,41,38,37,39,40,41,38,0,39,38,37,39,40,41,38,37,39,40,41,38,38,38,38,40,38,38,38,38,38,37,39,40,41,38,37,39,40,41,38,37,39,40,41,39,38,37,39,40,41,38,42,43,44,0,0,0,0,0,45,46,45,46,45,46,45,46,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,46,46,45,46,46,45,46,45,46,45,46,46,45,46,45,46,45,46,45,46,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["acknowledgement",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["u32",0]],["bool",0]],[[["",0],["u32",0]],["bool",0]],[[["",0]],["acknowledgement",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["acknowledgement",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[]],[[]],[[]],[[["",0]],["bool",0]],null,null,[[["u32",0]],["acknowledgementcheck",3]],[[["u32",0]],["acknowledgementlist",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["config",3]],[[["",0]],["aetherconfig",3]],[[["",0]],["handshakeconfig",3]],[[["",0]],["linkconfig",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["config",3]],[[]],[[]],[[]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["config",3]],["bool",0]],[[["",0],["aetherconfig",3]],["bool",0]],[[["",0],["handshakeconfig",3]],["bool",0]],[[["",0],["linkconfig",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["path",3]],["result",4,[["config",3],["aethererror",4]]]],[[],["result",4,[["config",3],["aethererror",4]]]],null,null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,[[["",0],["config",3]],["bool",0]],[[["",0],["aetherconfig",3]],["bool",0]],[[["",0],["handshakeconfig",3]],["bool",0]],[[["",0],["linkconfig",3]],["bool",0]],null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[["string",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["aethercipher",3]],[[["",0],["",0]]],[[["",0],["encrypted",3]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["encrypted",3],["aethererror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["vec",3,[["u8",0]]]]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["vec",3,[["u8",0]]]],["aethercipher",3]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["fromutf8error",3]]],[[]],[[["recvtimeouterror",4]]],[[["systemtimeerror",3]]],[[["recverror",3]]],[[["senderror",3,[["packet",3]]]]],[[["decodeerror",4]]],[[["errorstack",3]]],[[["error",3]]],[[],["usize",0]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["id",3]],[[["",0]],["publicid",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",4,[["publicid",3],["aethererror",4]]]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["result",4,[["id",3],["aethererror",4]]]],[[],["result",4,[["id",3],["aethererror",4]]]],[[],["result",4,[["id",3],["aethererror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0]],["result",4,[["string",3],["aethererror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0]],["result",4,[["string",3],["aethererror",4]]]],[[["",0]],["result",4,[["string",3],["aethererror",4]]]],[[["",0]],["result",4,[["aethererror",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]]],[[["",0]],["result",4,[["aethererror",4]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["socketaddr",4]],[[["",0]],["result",4,[["receiver",3,[["packet",3]]],["aethererror",4]]]],[[],["usize",0]],[[]],[[["",0]],["result",4,[["bool",0],["aethererror",4]]]],[[["",0]],["bool",0]],[[["packet",3]],["bool",0]],[[["id",3],["udpsocket",3],["socketaddr",4],["publicid",3],["u32",0],["u32",0],["config",3]],["result",4,[["link",3],["aethererror",4]]]],null,null,null,[[["",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0],["duration",3]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["aethererror",4]]]],[[["",0],["packet",3]],["result",4,[["aethererror",4]]]],null,[[["",0],["duration",3]]],[[["",0]]],[[["",0]],["result",4,[["aethererror",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]],["result",4,[["aethererror",4]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["aethercipher",3],["receiver",3,[["packet",3]]],["sender",3,[["packet",3]]],["arc",3,[["mutex",3,[["bool",0]]]]],["config",3]],["decryptionthread",3]],[[["",0]],["result",4,[["aethererror",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[["",0],["packet",3]],["result",4,[["vecdeque",3,[["packet",3]]],["u8",0]]]],[[]],[[]],[[["u32",0]],["orderlist",3]],[[["arc",3,[["udpsocket",3]]],["socketaddr",4],["sender",3,[["packet",3]]],["arc",3,[["mutex",3,[["bool",0]]]]],["arc",3,[["mutex",3,[["acknowledgementcheck",3]]]]],["arc",3,[["mutex",3,[["acknowledgementlist",3]]]]],["arc",3,[["mutex",3,[["u32",0]]]]],["config",3]],["receivethread",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["",0]],["packet",3]],[[["",0],["packet",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["packet",3]],["bool",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]]],[[]],[[],["usize",0]],[[]],[[["",0]],["bool",0]],[[["arc",3,[["udpsocket",3]]],["socketaddr",4],["receiver",3,[["packet",3]]],["arc",3,[["mutex",3,[["bool",0]]]]],["arc",3,[["mutex",3,[["acknowledgementcheck",3]]]]],["arc",3,[["mutex",3,[["acknowledgementlist",3]]]]],["arc",3,[["mutex",3,[["u32",0]]]]],["arc",3,[["mutex",3,[["bool",0]]]]],["config",3]],["sendthread",3]],[[["",0],["packet",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0],["acknowledgement",3]]],[[["",0],["vec",3,[["u8",0]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ptype",4]],[[["",0],["",0]]],[[["",0]],["vec",3,[["u8",0]]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["u8",0]],["ptype",4]],[[]],[[["u8",0]]],[[]],[[]],[[["vec",3,[["u8",0]]]],["packet",3]],[[["",0]],["u8",0]],[[["u16",0]],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,[[["ptype",4],["u32",0]],["packet",3]],null,null,null,null,[[["",0],["bool",0]]],[[["",0],["packetmeta",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["str",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["str",0]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["socketaddr",4]]],[[["string",3]],["initialized",3]],[[["id",3],["socketaddr",4]]],[[["",0],["str",0]],["result",4,[["vec",3,[["u8",0]]],["aethererror",4]]]],[[["",0],["str",0],["vec",3,[["u8",0]]]],["result",4,[["u8",0],["u8",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[["",0],["str",0]],["result",4,[["u8",0],["u8",0]]]],null,null,null,null,[[["link",3],["string",3],["u32",0],["config",3]],["result",4,[["peer",3],["aethererror",4]]]],[[["id",3],["udpsocket",3],["socketaddr",4],["string",3],["string",3],["config",3]],["result",4,[["link",3],["aethererror",4]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["trackerpacket",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["connectionrequest",3]],[[],["trackerpacket",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["",0],["connectionrequest",3]],["bool",0]],[[["",0],["trackerpacket",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,null,[[["",0],["connectionrequest",3]],["bool",0]],[[["",0],["trackerpacket",3]],["bool",0]],null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[["vec",3,[["u8",0]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[]],[[]],[[["u16",0]],["vec",3,[["u8",0]]]],[[["u32",0]],["vec",3,[["u8",0]]]],[[["usize",0]],["vec",3,[["u8",0]]]],[[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]],["vec",3,[["u8",0]]]]],"p":[[3,"Acknowledgement"],[3,"AcknowledgementCheck"],[3,"AcknowledgementList"],[3,"LinkConfig"],[3,"Config"],[3,"AetherConfig"],[3,"HandshakeConfig"],[3,"Encrypted"],[3,"AetherCipher"],[4,"AetherError"],[13,"ElapsedTime"],[13,"MutexLock"],[13,"LinkStopped"],[13,"RecvTimeout"],[13,"NotConnected"],[13,"YamlParse"],[13,"FileRead"],[13,"FileWrite"],[13,"AuthenticationInvalid"],[13,"AuthenticationFailed"],[13,"OpenSSLError"],[13,"FromUtf8Error"],[13,"Base64DecodeError"],[13,"ChannelSendError"],[13,"ChannelRecvError"],[3,"Id"],[3,"PublicId"],[3,"Link"],[3,"DecryptionThread"],[3,"OrderList"],[3,"ReceiveThread"],[3,"SendThread"],[4,"PType"],[3,"PacketFlags"],[3,"Packet"],[3,"PacketMeta"],[4,"Connection"],[3,"Aether"],[3,"Peer"],[3,"Initialized"],[3,"Failure"],[13,"Init"],[13,"Connected"],[13,"Failed"],[3,"ConnectionRequest"],[3,"TrackerPacket"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};